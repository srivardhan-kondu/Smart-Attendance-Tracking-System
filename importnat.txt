1. install python in your local machine
2. check for local python version in terminal :" --version"
3. if version is older then 3.12. update to latest version in terminal
4. need to install all thesse libraries:
     1. pip install open cv
     2. pip install numpy
     3. pip install cv2
     4. pip install face_recognization
5. the major problem you may face is , while installing face_recognization libraries.
6. to address this issue;
     1. install visual studio code community version 2022
     2. check on c/c++
     3. click on install
7. install cmake from chrome from its offcial website
8. on ternimal/cmd: pip install cmake
9. NOW THE BIG TASK 👍
go to yputube and see how to install "dlib"
[ I THINK YOU MAY FACE ERROR WHILE DOWNLOADING THIS , FEEL FREE TO CONTACT ]
once the d lib is sucesssfully installed.
go to terminl," pip install face_recognization"
add images to training_images with file name as student name , and save its
--> and now project is ready.........
open main.py file and run it. it will open , webcam, captures the images and marks your attendence in " ATTENDENCE .csv" 
------------------------------------------------------------------------------------------------------------------------






Here's the documentation for the modules and packages used in this code:

### Modules and Packages Used:

1. **cv2 (OpenCV)**:
   - **Purpose**: OpenCV (Open Source Computer Vision Library) is a library of programming functions mainly aimed at real-time computer vision. It provides various tools for image and video analysis, including tools for face detection and recognition.
   - **Usage**: Used for capturing video from the webcam, processing images (resizing, color conversion), and drawing rectangles and text on images.

2. **numpy (np)**:
   - **Purpose**: NumPy is a fundamental package for scientific computing with Python. It provides support for arrays, matrices, and mathematical functions, enabling efficient numerical computations.
   - **Usage**: Used for array manipulation and mathematical operations, particularly for working with images as arrays.

3. **face_recognition**:
   - **Purpose**: This is a Python library for face recognition. It wraps the face recognition functionality of dlib, providing a simple interface for detecting and recognizing faces in images.
   - **Usage**: Used for face detection, face recognition, and face encoding in the input images.

4. **os**:
   - **Purpose**: The `os` module provides a portable way to interact with the operating system. It is used for performing operating system-related tasks such as file operations, directory manipulation, etc.
   - **Usage**: Used for listing files in a directory (`os.listdir`) to load training images.

5. **datetime**:
   - **Purpose**: The `datetime` module supplies classes for manipulating dates and times. It provides functionality for working with dates, times, time zones, etc.
   - **Usage**: Used for timestamping attendance entries with the current date and time.

### Description of Functionality:

- **`findEncodings(images)`**: This function takes a list of images as input and returns a list of face encodings corresponding to those images. It utilizes the `face_recognition` library to encode faces detected in the images.

- **`markAttendance(name)`**: This function marks attendance by appending the name and timestamp to a CSV file named `Attendance.csv`. It checks if the name already exists in the file to avoid duplicate entries.

### Overall Workflow:

1. Load training images from the specified directory.
2. Encode faces in the training images using `findEncodings`.
3. Start capturing video from the webcam using OpenCV (`cv2.VideoCapture`).
4. Detect faces in each frame of the video using `face_recognition.face_locations`.
5. Recognize faces using `face_recognition.compare_faces` and mark attendance using `markAttendance`.
6. Display the processed video stream with bounding boxes and names using OpenCV (`cv2.imshow`).
7. Terminate the video capture loop upon pressing 'q' and release resources.

This code forms a basic face recognition attendance system using a webcam feed, allowing you to mark attendance based on recognized faces.

